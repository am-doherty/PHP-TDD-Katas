<?php
// see http://codekata.pragprog.com/2007/01/kata_two_karate.html
require_once '../src/binarychop2.php';
require_once 'PHPUnit/Autoload.php';

class chopTest extends PHPUnit_Framework_TestCase
{
	/* Search for integer '3' in empty array */
    public function testChop()
    {
		$myChopper = new Binarychop2();
        $this->assertEquals(-1, $myChopper->chop(3,array()));
    }
	/* Search for integer '3' in array(1) */
    public function testChop2()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(-1, $myChopper->chop(3,array(1)));
    }	
	/* Search for integer '1' in array(1) */
    public function testChop3()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(0, $myChopper->chop(1,array(1)));
    }	
	/* Search for integer '1' in array(1,3,5) */
    public function testChop4()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(0, $myChopper->chop(1,array(1, 3, 5)));
    }	
	/* Search for integer '3' in array(1,3,5) */
    public function testChop5()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(1, $myChopper->chop(3,array(1, 3, 5)));
    }
	/* Search for integer '5' in array(1,3,5) */
    public function testChop6()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(2, $myChopper->chop(5,array(1, 3, 5)));
    }	
	/* test Incorrect argument types ---- Search for string 'foo' in array(1,3,5) */
    public function testChop7()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(-1, $myChopper->chop('foo',array(1, 3, 5)));
    }
	/* test Incorrect argument types ---- Search for integer 5 in string */
    public function testChop8()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(-1, $myChopper->chop(5,'a string'));
    }		
	/* Search for integer '5' in array(1,3,5) */
    public function testChop9()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(2, $myChopper->chop(5,array(1, 3, 5,7,9)));
    }	
	/* Search for integer '12' in longer array */
    public function testChop10()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(2, $myChopper->chop(5,array(1, 3, 5,7,9,12,34,123,223,278,450,1124,1900)));
    }	
	/* Search for integer '450' in longer array */
    public function testChop11()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(10, $myChopper->chop(450,array(1, 3, 5,7,9,12,34,123,223,278,450,1124,1900)));
    }		
	/* Search for integer '450' in longer array (doesnt exist) */
    public function testChop12()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(-1, $myChopper->chop(221,array(1, 3, 5,7,9,12,34,123,223,278,450,1124,1900)));
    }	
	/* Search for integer '450' in longer array, of even number of items */
    public function testChop13()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(10, $myChopper->chop(450,array(1, 3, 5,7,9,12,34,123,223,278,450,1124)));
    }		
	/* */	
    public function testChop14()
    {
		$myChopper = new Binarychop2();
		$this->assertEquals(13, $myChopper->chop(450,array(1, 3, 5,5,7,9,12,12,34,123,223,278,278,450,1124)));
    }		
	/* Test effect of multiple instances of integers and how split determines choice - designed to match on
	  * an element even if it is not the first instance of value 
	  * We're looking to match on index 188, however index 189 has the same value
	  * The split functions we have written so far will mean that the index 189 match lands as a middling value 
	  * and (previously) would match and return 
	  */				
	public function testChop15()
	{
		$myChopper = new BinaryChop2();
		$this->assertEquals(188,$myChopper->chop(773,array(9,11,15,16,17,18,19,19,26,29,36,36,46,57,57,65,68,68,77,78,88,88,102,104,104,107,115,119,124,129,140,140,140,146,146,161,164,165,172,172,179,179,179,183,190,190,192,192,197,203,203,203,212,212,214,218,231,238,244,248,248,251,257,272,278,288,295,298,305,319,323,325,325,329,334,342,345,350,364,374,383,388,389,392,392,393,400,400,400,408,414,417,419,430,431,432,434,437,438,438,438,440,443,445,446,459,459,462,463,471,473,484,497,501,509,521,529,535,536,537,537,538,543,546,546,553,553,556,559,559,560,560,566,579,580,591,602,602,604,610,618,619,620,622,626,629,633,641,641,642,644,648,649,649,649,651,654,655,657,666,678,689,691,692,703,705,714,715,726,728,728,730,735,738,739,741,742,743,745,750,750,753,757,764,764,766,766,767,773,773,779,784,784,787,790,793,797,797,803,808,810,811,823,828,829,832,835,837,840,841,841,843,849,860,868,869,871,874,876,876,877,878,892,903,910,910,914,917,918,920,921,924,927,933,933,934,935,941,956,959,965,973,976,976,980,985,997,999,999,999,1001,1002,1015,1020,1027,1033,1037,1039,1045,1050,1050,1051,1063,1077,1078,1078,1087,1091,1097,1097,1101,1115,1123,1130,1140,1140,1146,1148,1152,1158,1161,1163,1163,1164,1166,1170,1173,1174,1178,1181,1181,1187,1188,1190,1190,1192,1194,1203,1204,1205,1209,1211,1213,1214,1228,1234,1234,1236,1241,1245,1252,1261,1262,1267,1267,1276,1280,1282,1282,1288,1289,1298,1298,1307,1310,1311,1317,1325,1330,1332,1339,1342,1342,1345,1349,1353,1357,1361,1364,1373,1377,1388,1389,1390,1394,1400,1407,1415,1415,1415,1417,1420,1422,1425,1426,1427,1435,1437,1440,1440,1446,1447,1448,1448,1448,1448,1451,1455,1456,1458,1468,1472,1476,1480,1482,1484,1485,1492,1498,1498,1508,1513,1521,1522,1522,1528,1530,1544,1547,1548,1549,1551,1551,1558,1561,1563,1568,1577,1581,1586,1588,1590,1596,1599,1600,1601,1605,1613,1619,1628,1628,1628,1629,1632,1633,1637,1637,1647,1650,1654,1661,1663,1664,1666,1666,1669,1670,1673,1675,1687,1691,1696,1701,1712,1714,1723,1724,1728,1735,1736,1738,1739,1740,1746,1749,1751,1751,1752,1757,1772,1777,1777,1779,1781,1781,1793,1801,1811,1825,1826,1826,1830,1834,1837,1845,1853,1854,1858,1861,1871,1872,1874,1881,1883,1886,1891,1891,1900,1904,1908,1908,1915,1919,1927,1931,1933,1938,1939,1948,1953,1953,1956,1956,1962,1967,1972,1985,1992,1997,2000,2002,2004,2007,2007,2010,2012,2014,2016,2024,2030,2038,2049,2051,2052,2059,2060,2072,2074,2077,2083,2084,2096,2107,2113,2116,2117,2121,2127,2131,2137,2138,2147,2150,2151,2151,2160,2169,2172,2173,2175,2175,2176,2177,2177,2188,2188,2189,2202,2202,2203,2214,2217,2219,2226,2229,2231,2232,2234,2239,2239,2240,2243,2244,2244,2247,2251,2252,2255,2260,2262,2263,2266,2267,2279,2288,2300,2301,2301,2302,2304,2305,2307,2315,2330,2342,2346,2346,2352,2358,2359,2362,2370,2372,2375,2379,2381,2382,2382,2393,2393,2405,2405,2414,2416,2416,2417,2421,2426,2434,2435,2437,2437,2442,2452,2457,2458,2472,2473,2475,2476,2478,2482,2487,2496,2501,2514,2514,2524,2525,2526,2528,2529,2535,2542,2550,2551,2557,2557,2558,2560,2565,2570,2573,2578,2579,2580,2584,2593,2597,2603,2603,2608,2610,2618,2618,2618,2618,2618,2625,2630,2641,2649,2655,2657,2657,2665,2665,2666,2674,2678,2683,2691,2695,2696,2700,2701,2705,2715,2715,2715,2719,2722,2724,2725,2725,2725,2729,2738,2751,2760,2763,2766,2777,2781,2789,2794,2802,2802,2805,2805,2816,2817,2827,2831,2833,2835,2841,2842,2842,2843,2852,2855,2855,2863,2863,2867,2871,2873,2877,2878,2882,2890,2892,2893,2894,2895,2896,2896,2897,2897,2902,2902,2917,2924,2926,2935,2937,2943,2943,2945,2947,2957,2957,2959,2959,2963,2963,2963,2976,2980,2980,2982,2983,2987,2994,2994,2994,2996,2998,2999,3010,3012,3015,3015,3020,3025,3026,3030,3030,3040,3049,3053,3061,3062,3062,3074,3080,3082,3083,3085,3086,3093,3099,3111,3113,3117,3119,3120,3121,3130,3137,3141,3144,3147,3150,3156,3162,3164,3170,3170,3170,3172,3173,3178,3192,3202,3205,3206,3214,3214,3219,3219,3224,3234,3234,3234,3240,3241,3242,3252,3253,3256,3266,3273,3273,3275,3277,3284,3292,3292,3294,3298,3303,3303,3305,3312,3318,3327,3328,3334,3335,3338,3339,3341,3344,3347,3354,3356,3356,3356,3360,3366,3374,3374,3377,3378,3378,3382,3394,3400,3412,3418,3422,3424,3424,3435,3438,3446,3448,3457,3464,3467,3468,3469,3473,3473,3485,3490,3490,3491,3504,3505,3506,3509,3516,3519,3524,3525,3526,3530,3540,3543,3546,3550,3562,3562,3564,3567,3571,3582,3582,3592,3596,3611,3621,3626,3626,3627,3627,3627,3634,3637,3641,3651,3660,3661,3668,3676,3676,3682,3683,3683,3684,3686,3691,3692,3697,3699,3710,3710,3716,3718,3720,3729,3732,3733,3744,3745,3747,3748,3751,3752,3760,3764,3765,3766,3771,3778,3785,3799,3800,3809,3811,3819,3819,3823,3830,3839,3841,3847,3856,3858,3865,3866,3870,3879,3881,3890,3892,3892,3892,3892,3893,3906,3913,3915,3917,3923,3926,3927,3927,3933,3936,3937,3938,3948,3954,3958,3967,3967,3973,3975,3983,3987,3988,3994,3994,3994,4002,4002,4005,4005,4006,4018,4027,4028,4036,4039,4044,4044,4052,4054,4059,4062,4068,4070,4074,4075,4080,4094,4096,4096,4098,4106,4111,4119,4119,4119,4124,4133,4139,4142,4156,4157,4159,4163,4163,4170,4178,4181,4181,4182,4186,4193,4196,4202,4203,4211,4213,4214,4218,4231,4234,4236,4236,4236,4240,4243,4246,4255,4264,4264,4265,4267,4267,4271,4277,4287,4289,4298,4307,4307,4320,4322,4324,4325,4325,4325,4327,4328,4328,4331,4335,4337,4342,4343,4344,4354,4356,4361,4364,4365,4368,4377,4389,4401,4406,4408,4410,4414,4424,4426,4427,4433,4438,4450,4450,4451,4456,4463)));
	}	
}
?>